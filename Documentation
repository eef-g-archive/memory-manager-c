- manager.h

This is a header file for the memory manager program that contains the function prototypes for the Manager functions. 
The program uses a linked list to keep track of the free memory blocks and the busy memory blocks. 
The program has two modes of operation: first fit and best fit. 
In first fit mode, the program searches for the first free block of memory that is large enough to hold the requested size. 
In best fit mode, the program searches for the smallest free block of memory that is large enough to hold the requested size. 
The program has six main functions: Manager_new, Manager_init, Manager_allocate, Manager_free, Manager_coalesce, and Manager_destroy. 
Manager_new creates a new manager object with a specified size and mode. 
Manager_init initializes an existing manager object with a specified size and mode. 
Manager_allocate allocates a new block of memory with a specified size. 
Manager_free frees a block of memory with a specified address. 
Manager_coalesce coalesces adjacent free blocks of memory into one larger block of memory. 
Manager_destroy destroys an existing manager object.

- manager.c

This program is a memory manager program that manages memory allocation and deallocation. 
It uses a linked list to keep track of the free memory blocks and the busy memory blocks. 
The program has two modes of operation: first fit and best fit. 
In first fit mode, the program searches for the first free block of memory that is large enough to hold the requested size. 
In best fit mode, the program searches for the smallest free block of memory that is large enough to hold the requested size. 
The program has three main functions: Manager_new, Manager_init, and Manager_allocate.
Manager_new creates a new manager object with a specified size and mode. 
Manager_init initializes an existing manager object with a specified size and mode. 
Manager_allocate allocates a new block of memory with a specified size.

- manager_test.c

This is a test file for the memory manager program that tests the Manager functions. 
The program creates a new manager object with a specified size and mode using the Manager_new function. 
The program then tests the Manager_allocate function by allocating three blocks of memory with specified sizes. 
The program then tests the Manager_free function by freeing three blocks of memory with specified addresses. 
Finally, the program purposely fails to allocate memory using the Manager_allocate function.

